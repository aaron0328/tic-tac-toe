{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","coordinate","Math","floor","step","status","current","winner","moves","map","move","desc","fontWeight","key","style","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2PAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKXC,E,2KACSC,GAAI,IAAD,OACd,OACE,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAMxC,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA1BTC,IAAMC,WAiCpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,GAPE,E,wDAWPZ,GACV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACVR,QAASA,EAAQS,OAAO,CAAC,CACrBf,QAASA,EACTgB,WAAYC,KAAKC,MAAMpB,EAAE,GAAK,IAAMA,EAAI,KAE5CW,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAItBS,GACHpB,KAAKe,SAAS,CACVL,WAAWU,EACXT,QAAUS,EAAO,IAAO,M,+BAItB,IAmBFC,EAnBC,OACCd,EAAUP,KAAKM,MAAMC,QACrBe,EAAUf,EAAQP,KAAKM,MAAMI,YAC7Ba,EAAST,EAAgBQ,EAAQrB,SAEjCuB,EAAQjB,EAAQkB,KAAI,SAACL,EAAMM,GAC7B,IAAMC,EAAOD,EACb,eAAiBA,EAAQ,aAAeN,EAAKH,WAAa,IAC1D,mBAEEW,EAAa,EAAKtB,MAAMI,aAAegB,EAAO,OAAS,SAEzD,OACI,wBAAIG,IAAOH,GACP,4BAAQI,MAAS,CAACF,cAAahC,QAAS,kBAAM,EAAKmC,OAAOL,KAAQC,OAWhF,OAJMN,EADAE,EACS,WAAaA,EAEb,iBAAmBvB,KAAKM,MAAMK,QAAU,IAAM,KAG3D,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACIG,QAASqB,EAAQrB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAKiC,YAAYjC,OAGvC,yBAAKJ,UAAU,aACb,6BAAM0B,GACN,4BAAKG,S,GAxEIrB,IAAMC,WAsFzB,SAASU,EAAgBb,GAWvB,IAVA,IAAMgC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFlC,EAAI,EAAGA,EAAIkC,EAAMpB,OAAQd,IAAI,CAAC,IAAD,cAChBkC,EAAMlC,GADU,GAC3BmC,EAD2B,KACxBC,EADwB,KACrBC,EADqB,KAElC,GAAInC,EAAQiC,IAAMjC,EAAQiC,KAAOjC,EAAQkC,IAAMlC,EAAQiC,KAAOjC,EAAQmC,GAClE,OAAOnC,EAAQiC,GAGvB,OAAO,KAtBTG,IAASC,OACP,kBAACjC,EAAD,MACAkC,SAASC,eAAe,W","file":"static/js/main.9467beac.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return(\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>   \r\n    );\r\n}\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square \r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n  \r\n  class Game extends React.Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n              history: [{\r\n                  squares: Array(9).fill(null),\r\n              }],\r\n              stepNumber: 0,\r\n              xIsNext: true,\r\n          };\r\n      }\r\n\r\n      handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1]; \r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                coordinate: Math.floor(i/3) + ',' + i % 3 ,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n            'Go to move #' + move + ('history: (' + step.coordinate + ')' ):\r\n            'Go to game start';\r\n        \r\n        const fontWeight = this.state.stepNumber === move ? 'bold' : 'normal';\r\n\r\n            return (\r\n                <li key = {move}>\r\n                    <button style = {{fontWeight}} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status ;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  \r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++){\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}"],"sourceRoot":""}